#!/usr/bin/env python3
"""

The entry point for the CLI developer tools, similar to `rails` or `x.py`.

"""
import argparse
import subprocess
import sys
import json
import re
from pathlib import Path



def info(msg):
    print("\x1b[32msx: " + msg + "\x1b[0m")

def error(msg):
    print("\x1b[31msx: error: " + msg + "\x1b[0m", file=sys.stderr)
    sys.exit(1)

def generate_file(path: Path, content: str):
    print(f"  GEN {path}")
    if path.exists():
        error(f"File '{path}' already exists")

    Path(path.parent).mkdir(parents=True, exist_ok=True)
    with open(path, "w") as f:
        f.write(content)

def scaffold_app(args):
    app_name = args.name
    app_dir = Path("apps") / app_name

    def replace_placeholders(content):
        content = content.replace("<NAME>", app_name)
        return content

    if re.match(r"^[a-z][a-z0-9_]*$", app_name) is None:
        error(f"Invalid app name '{app_name}' (must be lowercase alphanumeric with underscores)")

    generate_file(app_dir / "Cargo.toml", replace_placeholders(CARGO_TOML))
    generate_file(app_dir / "build.rs", replace_placeholders(BUILD_RS))
    generate_file(app_dir / "main.rs", replace_placeholders(MAIN_RS))
    generate_file(app_dir / "app.spec.json", json.dumps({
        "name": app_name,
        "kind": "app/v0",
        "spec": {
            "depends": [],
            "provides": []
        }
    }, indent=2))

    print()
    info(f"generated app at {app_dir}")

    ensure_buildconfig_mk()
    with BUILD_CONFIG_MK.open("a") as f:
        f.write("\n# added by scaffold:\n")
        f.write(f"APPS += {app_dir}\n")
        info(f"added {app_dir} to APPS in buildconfig.mk")

def scaffold_command(args):
    if args.type == "app":
        scaffold_app(args)
    else:
        error(f"unknown scaffold type '{args.type}'")

def ensure_buildconfig_mk():
    if BUILD_CONFIG_MK.exists():
        return

    with BUILD_CONFIG_MK.open("w") as f:
        f.write(DEFAULT_BUILDCONFIG_MK)
        info("created buildconfig.mk - edit this file to change the build configuration")

def build_command(args):
    ensure_buildconfig_mk()
    try:
        subprocess.run(["make"], check=True)
    except subprocess.CalledProcessError as e:
        error(f"{e}")

def run_command(args):
    ensure_buildconfig_mk()
    try:
        subprocess.run(["make", "run"], check=True)
    except subprocess.CalledProcessError as e:
        error(f"{e}")

def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    build_parser = subparsers.add_parser('build')
    build_parser.set_defaults(func=build_command)

    run_parser = subparsers.add_parser('run')
    run_parser.set_defaults(func=run_command)

    scaffold_parser = subparsers.add_parser('scaffold')
    scaffold_parser.add_argument("--type", help="The artifact type", choices=["app"])
    scaffold_parser.add_argument("name", help="The name of artifact to be generated")
    scaffold_parser.set_defaults(func=scaffold_command)

    args = parser.parse_args()

    if hasattr(args, 'func'):
        args.func(args)
    else:
        parser.print_help()

if __name__ == '__main__':
    main()
